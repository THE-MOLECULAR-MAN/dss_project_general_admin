{
  "type": "step_based",
  "name": "Upgrade_All_Plugins",
  "active": true,
  "checklists": {
    "checklists": []
  },
  "delayedTriggersBehavior": {
    "delayWhileRunning": true,
    "squashDelayedTriggers": true,
    "suppressTriggersWhileRunning": true
  },
  "tags": [],
  "triggers": [
    {
      "id": "RYeqG5I0",
      "type": "temporal",
      "name": "3pm every day",
      "delay": 5,
      "active": true,
      "params": {
        "repeatFrequency": 1,
        "frequency": "Daily",
        "startingFrom": "2025-09-17",
        "daysOfWeek": [
          "Wednesday"
        ],
        "monthlyRunOn": "ON_THE_DAY",
        "minute": 0,
        "hour": 15,
        "timezone": "America/New_York",
        "lastUpdate": 1758120176833
      }
    }
  ],
  "reporters": [],
  "params": {
    "steps": [
      {
        "id": "custom_python_BOIH9XEdzbjxohOIpjuXyQ",
        "type": "custom_python",
        "name": "Upgrade_All_Plugins",
        "enabled": true,
        "alwaysShowComment": false,
        "runConditionType": "RUN_IF_STATUS_MATCH",
        "runConditionStatuses": [
          "SUCCESS",
          "WARNING"
        ],
        "runConditionExpression": "",
        "resetScenarioStatus": false,
        "delayBetweenRetries": 10,
        "maxRetriesOnFail": 0,
        "params": {
          "script": "#!/usr/bin/env python\n# coding: utf-8\n\n# In[1]:\n\n\nimport dataiku\nfrom dataikuapi.utils import DataikuException\n\n\n# In[2]:\n\n\n# take too long, not updated super often\nplugins_to_skip_update \u003d [\u0027salesforce\u0027,\n                          \u0027microsoft-power-bi-v2\u0027,\n                          \u0027googlesheets\u0027,\n                          \u0027tableau-hyper-export\u0027,\n                          \u0027servicenow\u0027,\n                          \u0027api-connect\u0027,\n                          \u0027jira\u0027\n                         ]\n\n\n# In[3]:\n\n\nclient \u003d dataiku.api_client()\n\n# Retrieve all plugins\nplugins \u003d client.list_plugins()\n\n\n# In[4]:\n\n\ndef get_installed_version_of_plugin(plugin_id):\n    plugins \u003d client.list_plugins()\n    for plugin_info in plugins:\n        if plugin_id \u003d\u003d plugin_info[\u0027id\u0027]:\n            return  plugin_info.get(\u0027version\u0027, \u0027unknown\u0027)\n        \n# get_installed_version_of_plugin(\u0027govern\u0027)\n\n\n# In[ ]:\n\n\n# Function to check and update plugins that have available updates\ndef update_plugins(plugins):\n    for plugin_info in plugins:\n        plugin_id \u003d plugin_info[\u0027id\u0027]\n        \n        if plugin_id in plugins_to_skip_update:\n            continue\n        \n        plugin \u003d client.get_plugin(plugin_id)\n      \n        version_before \u003d plugin_info.get(\u0027version\u0027, \u0027unknown\u0027)\n\n        try:\n            # 5. Install updates when available\n            print(f\u0027Attempting to update plugin {plugin_id} ... \u0027, end\u003d\"\")\n            future \u003d plugin.update_from_store()\n            future.wait_for_result()\n\n            version_after \u003d get_installed_version_of_plugin(plugin_id)\n            \n            if version_before \u003d\u003d version_after:\n                print(f\u0027 No update available.\u0027)\n            else:\n                print(f\" Updated plugin: {plugin_id} from {version_before} to version {version_after}\")\n\n#             # 6. Rebuild code environments if necessary\n#             if \u0027bundle\u0027 in latest_version_info:\n#                 print(f\"Rebuilding code environment for plugin: {plugin_id}\")\n#                 env_future \u003d plugin.rebuild_bundle_env()\n#                 env_future.wait_for_result()\n#                 print(f\"Rebuilt code environment for plugin: {plugin_id}\")\n        except Exception as e:\n            print(f\"Failed to update {plugin_id}: {str(e)}\")\n\nupdate_plugins(plugins)\n\nprint(\"You may need to update the associated code environments for any plugins that were upgraded.\")\n\n",
          "envSelection": {
            "envMode": "INHERIT"
          },
          "proceedOnFailure": false
        }
      }
    ]
  },
  "automationLocal": false,
  "customFields": {},
  "markedAsTest": false
}